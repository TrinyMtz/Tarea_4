amigos<-amigos[,-1]
amigos<-as.matrix(amigos)
diag(amigos)<-0
red_amigos <-graph_from_adjacency_matrix(amigos)
neighbors(red_amigos, "TRINIDAD")
length(neighbors(red_amigos, "TRINIDAD"))
mis_amigos <- neighbors(red_amigos, nombre)
mis_amigos <- neighbors(red_amigos, nombre)
neighbors(red_amigos, "TRINIDAD")
length(neighbors(red_amigos, "TRINIDAD"))
lista <- vector('list', 3)
print(lista)
lista <- vector('list', names(mis_amigos))
mis_amigos <- neighbors(red_amigos, nombre)
lista <- vector('list', names(mis_amigos))
mis_amigos <- neighbors(red_amigos, "TRINIDAD")
lista <- vector('list', names(mis_amigos))
lista <- vector('list', names(mis_amigos))
lista <- vector('list', length(mis_amigos))
lista[[x]] <- names(red_amigos)
names(red_amigos)
names(red_amigos)
lista[[x]] <- names(mis_amigos)
names(mis_amigos)
num_amigos <- function(red, nombre){
mis_amigos <- neighbors(red_amigos, nombre)
lista <- vector('list', length(mis_amigos))
for (name in names(lista)) {
lista[[x]] <- c(names(mis_amigos)[x], neighbors(red_amigos, names(mis_amigos)[x]))
}
}
num_amigos <- function(red, nombre){
mis_amigos <- neighbors(red, nombre)
lista <- vector('list', length(mis_amigos))
for (name in names(lista)) {
lista[[x]] <- c(names(mis_amigos)[x], neighbors(red_amigos, names(mis_amigos)[x]))
}
}
num_amigos(red_amigos, "TRINIDAD")
num_amigos <- function(red, nombre){
mis_amigos <- neighbors(red, nombre)
lista <- vector('list', length(mis_amigos))
for (name in names(lista)) {
lista[[x]] <- c(names(mis_amigos)[x], neighbors(red_amigos, names(mis_amigos)[x]))
}
print(lista)
}
num_amigos(red_amigos, "TRINIDAD")
num_amigos <- function(red, nombre){
mis_amigos <- neighbors(red, nombre)
lista <- vector('list', length(mis_amigos))
for (x in names(lista)) {
lista[[x]] <- c(names(mis_amigos)[x], neighbors(red, names(mis_amigos)[x]))
}
print(lista)
}
num_amigos(red_amigos, "TRINIDAD")
mis_amigos <- neighbors(red_amigos, "TRINIDAD")
lista <- vector('list', length(mis_amigos))
for (x in names(lista)) {
lista[[x]] <- c(names(mis_amigos)[x], neighbors(red, names(mis_amigos)[x]))
}
print(lista)
for (x in 1:length(lista)) {
lista[[x]] <- c(names(mis_amigos)[x], neighbors(red, names(mis_amigos)[x]))
}
print(lista)
for (x in 1:length(lista)) {
lista[[x]] <- c(names(mis_amigos)[x], neighbors(red, names(mis_amigos)[x]))
}
for (x in 1:length(mis_amigos)) {
lista[[x]] <- c(names(mis_amigos)[x], neighbors(red, names(mis_amigos)[x]))
}
for (x in 1:length(mis_amigos)) {
lista[[x]] <- c(names(mis_amigos)[x], neighbors(red, names(mis_amigos)[x]))
}
print(lista)
length(mis_amigos)
for (x in 1:length(mis_amigos)) {
lista[[x]] <- c(names(mis_amigos)[x], neighbors(red, names(mis_amigos)[x]))
}
names(mis_amigos)
lista[[1]] <- c(names(mis_amigos)[1], neighbors(red, names(mis_amigos)[1]))
print(lista)
num_amigos(red_amigos, "TRINIDAD")
mis_amigos <- neighbors(red_amigos, "TRINIDAD")
mis_amigos <- neighbors(red_amigos, "TRINIDAD")
mis_amigos
c(names(mis_amigos)[1], neighbors(red, names(mis_amigos)[1]))
names(mis_amigos)[1]
neighbors(red, names(mis_amigos)[1])
mis_amigos <- neighbors(red_amigos, "TRINIDAD")
lista <- vector('list', length(mis_amigos))
for (x in 1:length(mis_amigos)) {
lista[[1]] <- c(names(mis_amigos)[1], neighbors(mis_amigos, names(mis_amigos)[1]))
}
print(lista)
lista[[1]] <- c(names(mis_amigos)[1], neighbors(mis_amigos, names(mis_amigos)[1]))
neighbors(mis_amigos, names(mis_amigos)[1])
neighbors(red_amigos, names(mis_amigos)[1])
lista[[1]] <- c(names(mis_amigos)[1], length(neighbors(red_amigos, names(mis_amigos)[1])))
print(lista)
list(length(mis_amigos))
num_amigos <- function(red, nombre){
mmis_amigos <- neighbors(red, nombre)
lista <- vector('list', length(mis_amigos))
for (x in 1:length(mis_amigos)) {
lista[[x]] <- c(names(mis_amigos)[1], length(neighbors(red_amigos, names(mis_amigos)[1])))
}
print(lista)
}
num_amigos(red_amigos, "TRINIDAD")
num_amigos <- function(red, nombre){
mmis_amigos <- neighbors(red, nombre)
lista <- vector('list', length(mis_amigos))
for (x in 1:length(mis_amigos)) {
lista[[x]] <- c(names(mis_amigos)[x], length(neighbors(red_amigos, names(mis_amigos)[x])))
}
print(lista)
}
num_amigos(red_amigos, "TRINIDAD")
num_amigos <- function(red, nombre){
mmis_amigos <- neighbors(red, nombre)
lista <- vector('list', length(mis_amigos))
for (x in 1:length(mis_amigos)) {
lista[[x]] <- c(names(mis_amigos)[x], length(neighbors(red_amigos, names(mis_amigos)[x])))
}
lista[[length(mis_amigos)+1]] <- c(nombre, length(mis_amigos))
print(lista)
}
num_amigos(red_amigos, "TRINIDAD")
num_amigos <- function(red, nombre){
mmis_amigos <- neighbors(red, nombre)
lista <- vector('list', length(mis_amigos))
for (x in 1:length(mis_amigos)) {
lista[[x]] <- c(names(mis_amigos)[x], length(neighbors(red_amigos, names(mis_amigos)[x])))
}
lista[[length(mis_amigos)+1]] <- c(nombre, length(mis_amigos))
print(lista)
}
num_amigos(red_amigos, "TRINIDAD")
num_amigos(red_amigos, "ISABEL")
num_amigos(red_amigos, "JULIETA")
num_amigos(red_amigos, "ABRAHAM")
num_amigos(red_amigos, "ABRAHAM")
num_amigos <- function(red, nombre){
mmis_amigos <- neighbors(red, nombre)
lista <- vector('list', length(mis_amigos))
for (x in 1:length(mis_amigos)) {
lista[[x]] <- c(names(mis_amigos)[x], length(neighbors(red_amigos, names(mis_amigos)[x])))
}
lista[[length(mis_amigos)+1]] <- c(nombre, length(mis_amigos))
print(lista)
}
num_amigos(red_amigos, "ABRAHAM")
mmis_amigos <- neighbors(red, nombre)
lista <- vector('list', length(mis_amigos))
for (x in 1:length(mis_amigos)) {
lista[[x]] <- c(names(mis_amigos)[x], length(neighbors(red_amigos, names(mis_amigos)[x])))
}
lista[[length(mis_amigos)+1]] <- c(nombre, length(mis_amigos))
print(lista)
num_amigos(red_amigos, "TRINIDAD")
num_amigos(red_amigos, "ALONDRA")
mmis_amigos <- neighbors(red_amigos, "ABRAHAM")
lista <- vector('list', length(mis_amigos))
for (x in 1:length(mis_amigos)) {
lista[[x]] <- c(names(mis_amigos)[x], length(neighbors(red_amigos, names(mis_amigos)[x])))
}
lista[[length(mis_amigos)+1]] <- c(nombre, length(mis_amigos))
lista[[length(mis_amigos)+1]] <- c("ABRAHAM", length(mis_amigos))
print(lista)
for (x in 1:length(mis_amigos)) {
lista[[x]] <- c(names(mis_amigos)[x], length(neighbors(red_amigos, names(mis_amigos)[x])))
}
mmis_amigos <- neighbors(red_amigos, "ABRAHAM")
num_amigos <- function(red, nombre){
mis_amigos <- neighbors(red, nombre)
lista <- vector('list', length(mis_amigos))
for (x in 1:length(mis_amigos)) {
lista[[x]] <- c(names(mis_amigos)[x], length(neighbors(red_amigos, names(mis_amigos)[x])))
}
lista[[length(mis_amigos)+1]] <- c(nombre, length(mis_amigos))
print(lista)
}
num_amigos(red_amigos, "ABRAHAM")
num_amigos(red_amigos, "TRINIDAD")
get.adjacency(red_amigos)
function()
}
get.adjacency(red_amigos)
get.edge(red_amigos)
get.adjedgelist(red_amigos)
get.all.shortest.paths(red_amigos)
degree(redes_d, mode = "total")
degree(red_amigos, mode = "total")
sort(degree(red_amigos, mode = "total"))[1:2]
sort(degree(red_amigos, mode = "total"), decreasing = TRUE)[1:2]
sort(degree(red_amigos, mode = "total"), decreasing = TRUE)[1:2]
sort(degree(red_amigos, mode = "in"), decreasing = TRUE)[1:2]
sort(degree(red_amigos, mode = "out"), decreasing = TRUE)[1:2]
sort(degree(red_amigos, mode = "in"), decreasing = TRUE)[1:2]
#Personas que se consideran muy populares
sort(degree(red_amigos, mode = "out"), decreasing = TRUE)[1:2]
# Personas más populares sin importar desde que perspectica se vea
sort(degree(red_amigos, mode = "total"), decreasing = TRUE)[1:2]
# Personas más populares sin importar desde que perspectica se vea
sort(degree(red_amigos, mode = "in"), decreasing = TRUE)[1:5]
# Personas más populares sin importar desde que perspectica se vea
sort(degree(red_amigos, mode = "in"), decreasing = TRUE)[1:2]
#Personas que se consideran muy populares
sort(degree(red_amigos, mode = "out"), decreasing = TRUE)[1:2]
# Personas más populares sin importar desde que perspectica se vea
sort(degree(red_amigos, mode = "total"), decreasing = TRUE)[1:2]
# Personas más populares segun si la gente los considera amigos
sort(degree(red_amigos, mode = "in"), decreasing = TRUE)[1:2]
#Personas que se consideran muy populares
sort(degree(red_amigos, mode = "out"), decreasing = TRUE)[1:2]
Elabora un script que conteste lo siguiente:
install.packages("igraphdata") # Red de interacción proteína-proteína (PPI)
library(igraphdata)
library(igraphdata)
data(PPI)
read.graph(PPI)
barabasi <- barabasi.game(20)
barabasi <- sample_pa(20)
erdos <- erdos.renyi.game(20, directed = FALSE)
erdos <- erdos.renyi.game(20)
barabasi <- sample_pa(20)
erdos <- sample_gnp(20)
erdos <- sample_gnp(20, 0.4)
barabasi <- sample_pa(20)
erdos <- sample_gnp(20, 0.4)
barabasi <- sample_pa(20)
print(paste("El promedo de la red1 es:", mean(degree(erdos)), "y el de la segunda red es: ", mean(degree(barabasi))))
#Distribucion del degree
par(c(1,2))
#Distribucion del degree
par(1,2)
barplot(degree_distribution(), main='Distribucion del degree', ylim = c(0:1), col='red', ylab = "Pk", xlab = "K")
# Degree promedio
par(mfrow = c(1, 2))
hist(erdos, breaks=10, col="violet", main='Grado en Red ER')
hist(degree_distribution(erdos), breaks=10, col="violet", main='Grado en Red ER')
hist(degree_distribution(erdos), breaks=10, col="violet", main="Red tipo E-R")
hist(degree(erdos), breaks=10, col="violet", main="Red tipo E-R")
hist(degree(erdos), breaks=10, col="violet", main="Red tipo E-R")
hist(degree(barabasi), breaks=10, col="pink", main= "Red tipo S-F")
#Distribucion del degree
par(mfrow = c(1, 2))
hist(degree(erdos), breaks=10, col="violet", main="Red tipo E-R")
hist(degree(barabasi), breaks=10, col="pink", main= "Red tipo S-F")
# Coeficientes de clusterizacion
transitivity(red, type = "local") # CC local
# Coeficientes de clusterizacion
transitivity(erdos, type = "local") # CC local
transitivity(erdos, type = "global" ) # CC global
# Diametro / camino más largo
print(paste("El diametro de la red1 es:", diameter(erdos), "y el de la segunda red es: ", diameter(barabasi)))
# Redes
par(mfrow = c(1, 2))
plot(erdos)
plot(barabasi)
# Redes
par(mfrow = c(1, 2))
plot(erdos)
plot(barabasi)
diameter(barabasi)
plot(barabasi)
cat("\nCC local:",transitivity(erdos, type = "local"), "\n")
cat("\nCC global:", transitivity(erdos, type = "global" ), "\n")
# Diametro / camino más largo
print(paste("El diametro de la red1 es:", diameter(erdos), "y el de la red2 es: ", diameter(barabasi)))
erdos <- sample_gnp(20, 0.4)
barabasi <- sample_pa(20)
# Redes
par(mfrow = c(1, 2))
plot(erdos)
plot(erdos)
plot(barabasi)
# Redes
par(mfrow = c(1, 2))
plot(barabasi)
# Degree promedio
print(paste("El promedo de la red1 es:", mean(degree(erdos)), "y el de la red2 es: ", mean(degree(barabasi))))
# Coeficientes de clusterizacion
cat("\nCC de la red tipo E-R", "\n")
cat("\nCC local:", "\n")
transitivity(erdos, type = "local") # CC local
cat("\nCC global:", transitivity(erdos, type = "global" ), "\n") # CC global
cat("\nCC global:", transitivity(erdos, type = "global" ), "\n") # CC global
cat("\nCC global:", transitivity(erdos, type = "global" ), "\n") # CC global
cat("\nCC global:", transitivity(erdos, type = "global" ), "\n") # CC global
cat("\nCC global:", transitivity(barabasi, type = "global" ), "\n") # CC global
transitivity(barabasi, type = "local") # CC local
# Diametro / camino más largo
print(paste("El diametro de la red1 es:", diameter(erdos), "y el de la red2 es: ", diameter(barabasi)))
plot(erdos)
plot(barabasi)
expresion <- matrix(nrow = 20, ncol = 6)
nrow(expresion)[1] <- sample(1:10, 6, replace = TRUE)
nrow(expresion)[1] <- sample(1:10, 6, replace = TRUE)
nrow(expresion)[1] <- sample(1:10, 6, replace = TRUE)
expresion[1] <- sample(1:10, 6, replace = TRUE)
expresion
expresion
expresion[1] <- c(sample(1:10, 6, replace = TRUE))
expresion
expresion[1] <- cbind(sample(1:10, 6, replace = TRUE))
expresion
expresion[1] <- cbind(c(sample(1:10, 6, replace = TRUE)))
expresion
expresion <- matrix(nrow = 20, ncol = 6)
expresion[1] <- cbind(c(sample(1:10, 6, replace = TRUE)))
expresion
c(sample(1:10, 6, replace = TRUE))
expresion[1,] <- cbind(c(sample(1:10, 6, replace = TRUE)))
expresion
expresion <- matrix(nrow = 20, ncol = 6) # Matriz vacia
expresion
for (x in 1:20) {
nexpresion[x,] <- cbind(c(sample(1:10, 6, replace = TRUE)))
}
for (x in 1:20) {
expresion[x,] <- cbind(c(sample(1:10, 6, replace = TRUE)))
}
expresion
expresion <- matrix(nrow = 20, ncol = 6) # Matriz vacia
for (x in 1:20) {
expresion[x,] <- cbind(c(sample(1:10, 6, replace = TRUE)))
}
expresion
colnames(expresion) z- c("T1", "T2", "T3", "T4", "T5", "T6")
colnames(expresion) <- c("T1", "T2", "T3", "T4", "T5", "T6")
expresion
rownames()
rownames(expresion) <- c(1:20)
expresion
cor()
cor(expresion)
expresion <- matrix(nrow = 6, ncol = 20) # Matriz vacia
for (x in 1:20) { # Llenar matriz
expresion[x,] <- rbind(c(sample(1:10, 6, replace = TRUE)))
}
expresion
################################################################################
expresion2 <- matrix(nrow = 20, ncol = 6) # Matriz vacia
for (x in 1:6) { # Llenar matriz
expresion2[x,] <- cbind(c(sample(1:10, 6, replace = TRUE)))
}
expresion2
################################################################################
expresion2 <- matrix(nrow = 6, ncol = 20) # Matriz vacia
for (x in 1:6) { # Llenar matriz
expresion2[x,] <- cbind(c(sample(1:10, 6, replace = TRUE)))
}
colnames(expresion) <- c("T1", "T2", "T3", "T4", "T5", "T6")
expresion2
for (x in 1:6) { # Llenar matriz
expresion2[x,] <- cbind(c(sample(1:10, 20, replace = TRUE)))
}
colnames(expresion) <- c("T1", "T2", "T3", "T4", "T5", "T6")
expresion2
rownames(expresion2) <- c("T1", "T2", "T3", "T4", "T5", "T6")
colnames(expresion2) <- c(1:20)
expresion2
cor(expresion2)
t(expresion)
expresion <- matrix(nrow = 20, ncol = 6) # Matriz vacia
for (x in 1:20) { # Llenar matriz
expresion[x,] <- cbind(c(sample(1:10, 6, replace = TRUE)))
}
colnames(expresion) <- c("T1", "T2", "T3", "T4", "T5", "T6")
rownames(expresion) <- c(1:20)
expresion
t(expresion)
cor(expresion)
cor(expresion2)
cor(t(expresion))
expresion
t(expresion)
cor(t(expresion))
#Cargar el dataset
data (yeast)
#Pide actualizar la base de datos
igraph::upgrade_graph(yeast)
#Cargar el dataset
data (yeast)
igraph::upgrade_graph(yeast) # Actualizacion
proteinas <- data(igraph::upgrade_graph(yeast))
proteinas <- igraph::upgrade_graph(yeast) # Actualizacion
proteinas
class(proteinas)
plot(proteinas,vertex.size=15,vertex.size=5,
edge.arrow.size=0.25,layout=layout_nicely,vertex.size.label=0.25)
# CALCULOS
# Tipo de distribución de conectividades que tiene
hist(degree(proteinas), breaks=10, col="violet", main="Red de PPI")
# CALCULOS
# Tipo de distribución de conectividades que tiene
hist(degree_distribution(proteinas), breaks=10, col="violet", main="Red de PPI")
degree_
# CALCULOS
# Tipo de distribución de conectividades que tiene
hist(degree_(proteinas), breaks=10, col="violet", main="Red de PPI")
# CALCULOS
# Tipo de distribución de conectividades que tiene
hist(degree(proteinas), breaks=10, col="violet", main="Red de PPI")
barplot(degree_distribution(proteinas), main='Distribucion del degree', ylim = c(0:1), col='red', ylab = "Pk", xlab = "K")
# CALCULOS
# Tipo de distribución de conectividades que tiene
hist(degree(proteinas), breaks=10, col="violet", main="Red de PPI")
deg_prot <- degree(proteinas) # Grados de la red
m <- displ$new(proteinas) # Crear modelo
# Ajuste en log-log para ver que tipo de distribución podría ser.
library(poweRlaw)
# Ajuste en log-log para ver que tipo de distribución podría ser.
install.packages("poweRlaw")
# Ajuste en log-log para ver que tipo de distribución podría ser.
# install.packages("poweRlaw")
library(poweRlaw)
# Ajuste en log-log para ver que tipo de distribución podría ser.
# install.packages("poweRlaw")
library(poweRlaw)
deg_prot <- degree(proteinas) # Grados de la red
prot-log <- displ$new(proteinas) # Crear modelo
deg_prot <- degree(proteinas) # Grados de la red
prot-log <- displ$new(deg_prot) # Crear modelo
deg_prot <- degree(proteinas) # Grados de la red
prot-log <- displ$new(deg_prot) # Crear modelo
prot-log <- displ$new(deg_prot) # Crear modelo
deg_prot <- degree(proteinas) # Grados de la red
prot-log <- displ$new(deg_prot) # Crear modelo
prot-log <- displ$new(deg_prot)
prot-log <- displ$new(deg_prot)
prot-log <- displ$new(deg_prot)
prot-log <- displ$new(deg_prot)
logarit <- displ$new(deg_prot) # Crear modelo
deg_prot <- degree(proteinas) # Grados de la red
logarit <- displ$new(deg_prot) # Crear modelo
deg_prot
logarit
est_xmin <- estimate_xmin(logarit)# Estimar xmin
m$setXmin(est_xmin)
est_xmin <- estimate_xmin(logarit)# Estimar xmin
logarit <- displ$new(deg_prot) # Crear modelo
est_xmin <- estimate_xmin(logarit)# Estimar xmin
logarit$setXmin(est_xmin)
logarit$setPars(estimate_pars(prot)) # Estimar y fijar los parámetros de la ley de potencia
logarit$setPars(estimate_pars(logarit)) # Estimar y fijar los parámetros de la ley de potencia
plot(prot) #Grafico
plot(logarit) #Grafico
lines(prot, col = "red")
lines(logarit, col = "red")
# Las diez proteínas más conectadas
sort(degree(proteinas), decreasing = TRUE)[1:10]
# Diámetro y promedio de las distancias
diameter(proteinas)
mean(distances(proteinas))
distances(proteinas)
mean_distance(proteinas)
datos <- vector('list', 10) # Lista vacia
nodo <- sample(1:100, replace = FALSE) # Lista de nodos
distancia <- vector('list', 10) # Lista vacia
nodo <- sample(1:100, replace = FALSE) # Lista de nodos
for (x in 1:100) {
prot_100 <- delete_vertices(proteinas, nodo[x]) # Iniciar con la eliminacion de nodos
distancia[[x]] <- mean_distance(proteinas) # Registro de la distancia
print(nodo[x]) # Ver que nodos elimino
}
distancia <- vector('list', 100) # Lista vacia
nodo <- sample(1:100, replace = FALSE) # Lista de nodos
matrix(nrow = 100, ncol = c("Nodo_elim", "Distancia"))
matrix(nrow = 100, ncol = 2
a
matrix(nrow = 100, ncol = 2)
distancia <- matrix(nrow = 100, ncol = 2)
colnames(c("Nodo_elim", "Distancia"))
colnames(distancia) <- c("Nodo_elim", "Distancia")
distancia
distancia <- matrix(nrow = 100, ncol = 2) # Para guardar los datos (matriz vacia)
colnames(distancia) <- c("Nodo_elim", "Distancia")
nodo <- sample(1:100, replace = FALSE) # Lista de nodos
for (x in 1:100) {
a
a
data()
a
distancia[[x]] <- rbind(c(nodo[x], mean_distance(proteinas))) # Registro de la distancia y nodo eliminado
for (x in 1:100) {
prot_100 <- delete_vertices(proteinas, nodo[x]) # Iniciar con la eliminacion de nodos
distancia[[x]] <- rbind(c(nodo[x], mean_distance(proteinas))) # Registro de la distancia y nodo eliminado
}
distancia
distancia
#################################################################################
x#################################################################################
asc
sc
asf
asfc
a
#################################################################################
#                                 CALCULOS
a
ad
c
# ¿Hay proteínas que tengan un coeficiente de clusterización de 1? Eso qué significa.
# ¿Hay proteínas que tengan un coeficiente de clusterización de 1? Eso qué significa.
# ¿Hay proteínas que tengan un coeficiente de clusterización de 1? Eso qué significa.
# ¿Hay proteínas que tengan un coeficiente de clusterización de 1? Eso qué significa.
# ¿Hay proteínas que tengan un coeficiente de clusterización de 1? Eso qué significa.
